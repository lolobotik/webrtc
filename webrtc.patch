diff --git a/api/datachannelinterface.h b/api/datachannelinterface.h
index 7cb5582233..8a7b6d2ad1 100644
--- a/api/datachannelinterface.h
+++ b/api/datachannelinterface.h
@@ -88,7 +88,7 @@ class DataChannelObserver {
   virtual void OnMessage(const DataBuffer& buffer) = 0;
   // The data channel's buffered_amount has changed.
   virtual void OnBufferedAmountChange(uint64_t previous_amount) {}
-
+  virtual void OnReadyRead() {}
  protected:
   virtual ~DataChannelObserver() = default;
 };
diff --git a/media/sctp/sctptransport.cc b/media/sctp/sctptransport.cc
index 4ffaaf7f5a..8f836c53c3 100644
--- a/media/sctp/sctptransport.cc
+++ b/media/sctp/sctptransport.cc
@@ -996,6 +996,10 @@ void SctpTransport::OnNotificationFromSctp(
       RTC_LOG(LS_VERBOSE) << "SCTP_SENDER_DRY_EVENT";
       SetReadyToSendData();
       break;
+	case SCTP_SENDER_DRY_2_EVENT:
+      RTC_LOG(LS_VERBOSE) << "SCTP_SENDER_DRY_2_EVENT";
+      ChunkBufferIsEmpty();
+	  break;
     // TODO(ldixon): Unblock after congestion.
     case SCTP_NOTIFICATIONS_STOPPED_EVENT:
       RTC_LOG(LS_INFO) << "SCTP_NOTIFICATIONS_STOPPED_EVENT";
diff --git a/media/sctp/sctptransportinternal.h b/media/sctp/sctptransportinternal.h
index 4c3b542a52..980b8c6fa2 100644
--- a/media/sctp/sctptransportinternal.h
+++ b/media/sctp/sctptransportinternal.h
@@ -107,6 +107,7 @@ class SctpTransportInternal {
   virtual bool ReadyToSendData() = 0;
 
   sigslot::signal0<> SignalReadyToSendData;
+  sigslot::signal0<> ChunkBufferIsEmpty;
   // ReceiveDataParams includes SID, seq num, timestamp, etc. CopyOnWriteBuffer
   // contains message payload.
   sigslot::signal2<const ReceiveDataParams&, const rtc::CopyOnWriteBuffer&>
diff --git a/p2p/base/p2pconstants.cc b/p2p/base/p2pconstants.cc
index 41d02dd968..d885419af4 100644
--- a/p2p/base/p2pconstants.cc
+++ b/p2p/base/p2pconstants.cc
@@ -45,7 +45,7 @@ const int MIN_CHECK_RECEIVING_INTERVAL = 50;
 const int RECEIVING_TIMEOUT = MIN_CHECK_RECEIVING_INTERVAL * 50;
 const int RECEIVING_SWITCHING_DELAY = 1000;
 const int BACKUP_CONNECTION_PING_INTERVAL = 25 * 1000;
-const int REGATHER_ON_FAILED_NETWORKS_INTERVAL = 5 * 60 * 1000;
+const int REGATHER_ON_FAILED_NETWORKS_INTERVAL = 30 * 1000;
 
 // When the socket is unwritable, we will use 10 Kbps (ignoring IP+UDP headers)
 // for pinging. When the socket is writable, we will use only 1 Kbps because we
diff --git a/p2p/base/portallocator.cc b/p2p/base/portallocator.cc
index 023e90be62..5a776fd5fb 100644
--- a/p2p/base/portallocator.cc
+++ b/p2p/base/portallocator.cc
@@ -203,6 +203,15 @@ bool PortAllocator::SetConfiguration(
   return true;
 }
 
+bool PortAllocator::SetConfigurationFromTitan(const ServerAddresses& stun_servers,
+	const std::vector<RelayServerConfig>& turn_servers,
+	int candidate_pool_size,
+	bool prune_turn_ports,
+	webrtc::TurnCustomizer* turn_customizer)
+{
+	return SetConfiguration(stun_servers, turn_servers, candidate_pool_size, prune_turn_ports, turn_customizer);
+}
+
 std::unique_ptr<PortAllocatorSession> PortAllocator::CreateSession(
     const std::string& content_name,
     int component,
diff --git a/p2p/base/portallocator.h b/p2p/base/portallocator.h
index 7026f2b2b6..410723f2c6 100644
--- a/p2p/base/portallocator.h
+++ b/p2p/base/portallocator.h
@@ -365,6 +365,12 @@ class RTC_EXPORT PortAllocator : public sigslot::has_slots<> {
                         const absl::optional<int>&
                             stun_candidate_keepalive_interval = absl::nullopt);
 
+  bool SetConfigurationFromTitan(const ServerAddresses& stun_servers,
+                        const std::vector<RelayServerConfig>& turn_servers,
+                        int candidate_pool_size,
+                        bool prune_turn_ports,
+                        webrtc::TurnCustomizer* turn_customizer = nullptr);
+
   const ServerAddresses& stun_servers() const {
     CheckRunOnValidThreadIfInitialized();
     return stun_servers_;
diff --git a/pc/datachannel.cc b/pc/datachannel.cc
index 19f0e6855a..13b067dbed 100644
--- a/pc/datachannel.cc
+++ b/pc/datachannel.cc
@@ -425,6 +425,15 @@ void DataChannel::OnChannelReady(bool writable) {
   UpdateState();
 }
 
+void DataChannel::OnReadyRead()
+{
+  RTC_LOG(LS_INFO) << "OnReadyRead";
+  if (observer_) {
+    observer_->OnReadyRead();
+  }
+}
+
+
 void DataChannel::CloseAbruptly() {
   if (state_ == kClosed) {
     return;
diff --git a/pc/datachannel.h b/pc/datachannel.h
index 22ea354c21..c2892ac178 100644
--- a/pc/datachannel.h
+++ b/pc/datachannel.h
@@ -150,6 +150,7 @@ class DataChannel : public DataChannelInterface, public sigslot::has_slots<> {
   // underlying DataMediaChannel becomes ready, or when this channel is a new
   // stream on an existing DataMediaChannel, and we've finished negotiation.
   void OnChannelReady(bool writable);
+  void OnReadyRead();
 
   // Slots for provider to connect signals to.
   void OnDataReceived(const cricket::ReceiveDataParams& params,
diff --git a/pc/peerconnection.cc b/pc/peerconnection.cc
index 4a5bd92d14..a24fca2d5b 100644
--- a/pc/peerconnection.cc
+++ b/pc/peerconnection.cc
@@ -5321,6 +5321,8 @@ bool PeerConnection::ConnectDataChannel(DataChannel* webrtc_data_channel) {
         webrtc_data_channel, &DataChannel::OnClosingProcedureStartedRemotely);
     SignalSctpClosingProcedureComplete.connect(
         webrtc_data_channel, &DataChannel::OnClosingProcedureComplete);
+	ChunkSftpBufferIsEmpty.connect(webrtc_data_channel,
+                                      &DataChannel::OnReadyRead);
   }
   return true;
 }
@@ -5346,6 +5348,7 @@ void PeerConnection::DisconnectDataChannel(DataChannel* webrtc_data_channel) {
     SignalSctpDataReceived.disconnect(webrtc_data_channel);
     SignalSctpClosingProcedureStartedRemotely.disconnect(webrtc_data_channel);
     SignalSctpClosingProcedureComplete.disconnect(webrtc_data_channel);
+	ChunkSftpBufferIsEmpty.disconnect(webrtc_data_channel);
   }
 }
 
@@ -5906,6 +5909,8 @@ bool PeerConnection::CreateSctpTransport_n(const std::string& mid) {
   sctp_invoker_.reset(new rtc::AsyncInvoker());
   sctp_transport_->SignalReadyToSendData.connect(
       this, &PeerConnection::OnSctpTransportReadyToSendData_n);
+  sctp_transport_->ChunkBufferIsEmpty.connect(
+      this, &PeerConnection::ChunkBufferIsEmpty_n);
   sctp_transport_->SignalDataReceived.connect(
       this, &PeerConnection::OnSctpTransportDataReceived_n);
   // TODO(deadbeef): All we do here is AsyncInvoke to fire the signal on
@@ -5921,6 +5926,19 @@ bool PeerConnection::CreateSctpTransport_n(const std::string& mid) {
   return true;
 }
 
+void PeerConnection::ChunkBufferIsEmpty_n() {
+  RTC_DCHECK(data_channel_type_ == cricket::DCT_SCTP);
+  RTC_DCHECK(network_thread()->IsCurrent());
+  // Note: Cannot use rtc::Bind here because it will grab a reference to
+  // PeerConnection and potentially cause PeerConnection to live longer than
+  // expected. It is safe not to grab a reference since the sctp_invoker_ will
+  // be destroyed before PeerConnection is destroyed, and at that point all
+  // pending tasks will be cleared.
+  sctp_invoker_->AsyncInvoke<void>(RTC_FROM_HERE, signaling_thread(), [this] {
+    ChunkBufferIsEmpty_s();
+  });
+}
+
 void PeerConnection::DestroySctpTransport_n() {
   RTC_DCHECK(network_thread()->IsCurrent());
   sctp_transport_.reset(nullptr);
@@ -5948,6 +5966,11 @@ void PeerConnection::OnSctpTransportReadyToSendData_s(bool ready) {
   SignalSctpReadyToSendData(ready);
 }
 
+void PeerConnection::ChunkBufferIsEmpty_s() {
+  RTC_DCHECK(signaling_thread()->IsCurrent());
+  ChunkSftpBufferIsEmpty();
+}
+
 void PeerConnection::OnSctpTransportDataReceived_n(
     const cricket::ReceiveDataParams& params,
     const rtc::CopyOnWriteBuffer& payload) {
diff --git a/pc/peerconnection.h b/pc/peerconnection.h
index b17881c862..4e6a383ee6 100644
--- a/pc/peerconnection.h
+++ b/pc/peerconnection.h
@@ -846,6 +846,9 @@ class PeerConnection : public PeerConnectionInternal,
   void OnSctpClosingProcedureStartedRemotely_n(int sid);
   void OnSctpClosingProcedureComplete_n(int sid);
 
+  void ChunkBufferIsEmpty_n();
+  void ChunkBufferIsEmpty_s();
+
   bool SetupMediaTransportForDataChannels_n(const std::string& mid)
       RTC_RUN_ON(network_thread());
   void OnMediaTransportStateChanged_n() RTC_RUN_ON(network_thread());
@@ -1070,6 +1073,7 @@ class PeerConnection : public PeerConnectionInternal,
   // but it doesn't have a mechanism for marshalling sigslot::signals
   std::unique_ptr<rtc::AsyncInvoker> sctp_invoker_;
   sigslot::signal1<bool> SignalSctpReadyToSendData;
+  sigslot::signal0<> ChunkSftpBufferIsEmpty;
   sigslot::signal2<const cricket::ReceiveDataParams&,
                    const rtc::CopyOnWriteBuffer&>
       SignalSctpDataReceived;
